'use client';

import React, { useState, useRef, useEffect } from 'react';
import { useAuth } from '@/context/auth-context';
import { useTranslations } from 'next-intl';
import { useToast } from '@/hooks/use-toast';
import { db, storage } from '@/lib/firebase';
import { doc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';
import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
    User, 
    Camera, 
    Upload, 
    Loader2, 
    CheckCircle, 
    ShieldCheck, 
    CreditCard, 
    Gift, 
    Users,
    Copy,
    Star,
    Crown,
    Building2,
    MapPin,
    Phone,
    Mail,
    Globe,
    Award,
    TrendingUp,
    Calendar,
    MessageSquare,
    Heart,
    Eye,
    Plus,
    X,
    Edit3,
    Settings,
    BarChart3,
    Clock,
    Target,
    Zap,
    Facebook,
    Twitter,
    Instagram,
    Linkedin,
    Github,
    Youtube,
    Link as LinkIcon
} from 'lucide-react';
import Image from 'next/image';
import { StandardCard } from '@/components/app/standard-card';
import { designTokens } from '@/lib/design-tokens';
import IdentityVerification from '@/components/identity-verification';
import { ProviderOnly } from '@/components/role-guard';

interface UserProfile {
    displayName: string;
    email: string;
    photoURL?: string;
    phoneNumber?: string;
    bio?: string;
    location?: string;
    website?: string;
    businessName?: string;
    businessType?: string;
    verification?: {
        status: 'Unverified' | 'Pending' | 'Verified' | 'Rejected';
        selfieUrl?: string;
        govIdUrl?: string;
        submittedAt?: any;
    };
    payoutDetails?: {
        method?: 'gcash' | 'bank';
        gCashNumber?: string;
        bankName?: string;
        bankAccountNumber?: string;
        bankAccountName?: string;
    };
    loyaltyPoints?: number;
    referralCode?: string;
    role?: string;
    subscription?: {
        tier: string;
        status: string;
    };
    // New enhanced fields
    socialMedia?: {
        facebook?: string;
        twitter?: string;
        instagram?: string;
        linkedin?: string;
        github?: string;
        youtube?: string;
        portfolio?: string;
    };
    skills?: string[];
    achievements?: {
        id: string;
        title: string;
        description: string;
        icon: string;
        earnedAt: any;
    }[];
    stats?: {
        profileViews: number;
        totalBookings: number;
        completedJobs: number;
        rating: number;
        responseTime: number;
        memberSince: any;
    };
    preferences?: {
        profileVisibility?: 'public' | 'private' | 'connections';
        showEmail?: boolean;
        showPhone?: boolean;
        showLocation?: boolean;
        allowMessages?: boolean;
    };
    activity?: {
        lastActive: any;
        totalLogins: number;
        streak: number;
    };
}

export default function ProfilePage() {
    const { user, verificationStatus } = useAuth();
    const { toast } = useToast();
    const t = useTranslations('Profile');
    const [activeTab, setActiveTab] = useState('overview');
    const [profile, setProfile] = useState<UserProfile | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isSaving, setIsSaving] = useState(false);
    const [uploadProgress, setUploadProgress] = useState<number | null>(null);
    const [isUploading, setIsUploading] = useState(false);
    const [newSkill, setNewSkill] = useState('');
    const [editingSkill, setEditingSkill] = useState<string | null>(null);
    const [editingSkillValue, setEditingSkillValue] = useState('');
    
    const fileInputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if (user) {
            loadUserProfile();
        }
    }, [user]);

    // Set default tab based on user role
    useEffect(() => {
        if (profile && profile.role === 'provider' && activeTab === 'overview') {
            setActiveTab('skills');
        }
    }, [profile, activeTab]);

    const loadUserProfile = async () => {
        if (!user) return;
        
        try {
            const userDoc = await getDoc(doc(db, 'users', user.uid));
            if (userDoc.exists()) {
                const userData = userDoc.data();
                setProfile({
                    displayName: userData.displayName || user.displayName || '',
                    email: userData.email || user.email || '',
                    photoURL: userData.photoURL || user.photoURL || '',
                    phoneNumber: userData.phoneNumber || '',
                    bio: userData.bio || '',
                    location: userData.location || '',
                    website: userData.website || '',
                    businessName: userData.businessName || '',
                    businessType: userData.businessType || '',
                    verification: userData.verification || { status: 'Unverified' },
                    payoutDetails: userData.payoutDetails || {},
                    loyaltyPoints: userData.loyaltyPoints || 0,
                    referralCode: userData.referralCode || '',
                    role: userData.role || 'client',
                    subscription: userData.subscription || { tier: 'free', status: 'active' },
                    // Enhanced fields with defaults
                    socialMedia: userData.socialMedia || {},
                    skills: userData.skills || [],
                    achievements: userData.achievements || [],
                    stats: userData.stats || {
                        profileViews: 0,
                        totalBookings: 0,
                        completedJobs: 0,
                        rating: 0,
                        responseTime: 0,
                        memberSince: user.metadata?.creationTime
                    },
                    preferences: userData.preferences || {
                        profileVisibility: 'public',
                        showEmail: true,
                        showPhone: false,
                        showLocation: true,
                        allowMessages: true
                    },
                    activity: userData.activity || {
                        lastActive: new Date(),
                        totalLogins: 1,
                        streak: 1
                    }
                });
            }
        } catch (error) {
            console.error('Error loading profile:', error);
            toast({ variant: 'destructive', title: 'Error', description: 'Failed to load profile data.' });
        } finally {
            setIsLoading(false);
        }
    };

    const handlePhotoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file || !user) return;

        setIsUploading(true);
        setUploadProgress(0);

        try {
            const storagePath = `users/${user.uid}/profile/photo.jpg`;
            const storageRef = ref(storage, storagePath);
            
            const uploadTask = uploadBytesResumable(storageRef, file);
            
            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    setUploadProgress(progress);
                },
                (error) => {
                    console.error('Upload error:', error);
                    toast({ variant: 'destructive', title: 'Upload Failed', description: 'Could not upload photo.' });
                },
                async () => {
                    try {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        
                        const userDocRef = doc(db, 'users', user.uid);
                        await updateDoc(userDocRef, {
                            photoURL: downloadURL,
                            updatedAt: serverTimestamp()
                        });
                        
                        setProfile(prev => prev ? { ...prev, photoURL: downloadURL } : null);
                        toast({ title: t('profilePictureUpdated') });
                    } catch (error) {
                        console.error('Error updating profile:', error);
                        toast({ variant: 'destructive', title: 'Error', description: t('failedToUpdateProfilePicture') });
                    } finally {
                        setIsUploading(false);
                        setUploadProgress(null);
                    }
                }
            );
        } catch (error) {
            console.error('Error uploading photo:', error);
            toast({ variant: 'destructive', title: 'Upload Failed', description: 'Could not upload photo.' });
            setIsUploading(false);
            setUploadProgress(null);
        }
    };

    const handleSaveProfile = async (section: string, data: Partial<UserProfile>) => {
        if (!user) return;
        
        setIsSaving(true);
        try {
            const userDocRef = doc(db, 'users', user.uid);
            await updateDoc(userDocRef, {
                ...data,
                updatedAt: serverTimestamp()
            });
            
            setProfile(prev => prev ? { ...prev, ...data } : null);
            
            let successMessage = '';
            switch (section) {
                case 'publicProfile':
                    successMessage = t('publicProfileUpdated');
                    break;
                case 'account':
                    successMessage = t('personalDetailsUpdated');
                    break;
                case 'payout':
                    successMessage = t('payoutDetailsUpdated');
                    break;
                default:
                    successMessage = t('detailsUpdated');
            }
            
            toast({ title: successMessage });
        } catch (error) {
            console.error('Error saving profile:', error);
            toast({ variant: 'destructive', title: 'Error', description: 'Failed to save changes.' });
        } finally {
            setIsSaving(false);
        }
    };

    const copyReferralCode = () => {
        if (profile?.referralCode) {
            navigator.clipboard.writeText(profile.referralCode);
            toast({ title: t('copied') });
        }
    };

    const addSkill = () => {
        if (newSkill.trim() && profile) {
            const updatedSkills = [...(profile.skills || []), newSkill.trim()];
            setProfile(prev => prev ? { ...prev, skills: updatedSkills } : null);
            setNewSkill('');
        }
    };

    const removeSkill = (skillToRemove: string) => {
        if (profile) {
            const updatedSkills = profile.skills?.filter(skill => skill !== skillToRemove) || [];
            setProfile(prev => prev ? { ...prev, skills: updatedSkills } : null);
        }
    };

    const editSkill = (skill: string) => {
        setEditingSkill(skill);
        setEditingSkillValue(skill);
    };

    const saveSkillEdit = () => {
        if (editingSkill && editingSkillValue.trim() && profile) {
            const updatedSkills = profile.skills?.map(skill => 
                skill === editingSkill ? editingSkillValue.trim() : skill
            ) || [];
            setProfile(prev => prev ? { ...prev, skills: updatedSkills } : null);
            setEditingSkill(null);
            setEditingSkillValue('');
        }
    };

    const cancelSkillEdit = () => {
        setEditingSkill(null);
        setEditingSkillValue('');
    };

    const calculateProfileCompletion = () => {
        if (!profile) return 0;
        
        const fields = [
            profile.displayName,
            profile.bio,
            profile.photoURL,
            profile.location,
            profile.phoneNumber,
            profile.website,
            profile.businessName,
            profile.skills?.length || 0,
            profile.socialMedia?.linkedin || profile.socialMedia?.portfolio
        ];
        
        const completedFields = fields.filter(field => 
            field && (typeof field === 'string' ? field.trim() !== '' : field > 0)
        ).length;
        
        return Math.round((completedFields / fields.length) * 100);
    };

    const getSocialMediaIcon = (platform: string) => {
        switch (platform) {
            case 'facebook': return <Facebook className="h-4 w-4" />;
            case 'twitter': return <Twitter className="h-4 w-4" />;
            case 'instagram': return <Instagram className="h-4 w-4" />;
            case 'linkedin': return <Linkedin className="h-4 w-4" />;
            case 'github': return <Github className="h-4 w-4" />;
            case 'youtube': return <Youtube className="h-4 w-4" />;
            default: return <LinkIcon className="h-4 w-4" />;
        }
    };

    if (isLoading) {
        return (
            <div className="container mx-auto px-4 py-8">
                <div className="animate-pulse">
                    <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
                    <div className="h-64 bg-gray-200 rounded"></div>
                </div>
            </div>
        );
    }

    if (!profile) {
        return (
            <div className="container mx-auto px-4 py-8">
                <Card>
                    <CardContent className="p-6 text-center">
                        <p>Failed to load profile data.</p>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="container mx-auto px-4 py-8">
            <div className="mb-8">
                <h1 className="text-3xl font-bold mb-2">{t('title')}</h1>
                <p className="text-muted-foreground">{t('subtitle')}</p>
            </div>

            <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
                <TabsList className={`grid w-full ${profile.role === 'provider' ? 'grid-cols-2' : 'grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-7'}`}>
                    {profile.role !== 'provider' && (
                        <>
                            <TabsTrigger value="overview" className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
                                <BarChart3 className="h-3 w-3 sm:h-4 sm:w-4" />
                                <span className="hidden sm:inline">Overview</span>
                            </TabsTrigger>
                            <TabsTrigger value="publicProfile" className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
                                <User className="h-3 w-3 sm:h-4 sm:w-4" />
                                <span className="hidden sm:inline">{t('publicProfile')}</span>
                            </TabsTrigger>
                            <TabsTrigger value="account" className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
                                <ShieldCheck className="h-3 w-3 sm:h-4 sm:w-4" />
                                <span className="hidden sm:inline">{t('account')}</span>
                            </TabsTrigger>
                            <TabsTrigger value="loyalty" className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
                                <Gift className="h-3 w-3 sm:h-4 sm:w-4" />
                                <span className="hidden sm:inline">{t('loyalty')}</span>
                            </TabsTrigger>
                            <TabsTrigger value="referrals" className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
                                <Users className="h-3 w-3 sm:h-4 sm:w-4" />
                                <span className="hidden sm:inline">{t('referrals')}</span>
                            </TabsTrigger>
                        </>
                    )}
                    <TabsTrigger value="skills" className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
                        <Zap className="h-3 w-3 sm:h-4 sm:w-4" />
                        <span className="hidden sm:inline">Skills</span>
                    </TabsTrigger>
                    <TabsTrigger value="payout" className="flex items-center gap-1 sm:gap-2 text-xs sm:text-sm">
                        <CreditCard className="h-3 w-3 sm:h-4 sm:w-4" />
                        <span className="hidden sm:inline">{t('payout')}</span>
                    </TabsTrigger>
                </TabsList>

                {profile.role !== 'provider' && (
                    <>
                        <TabsContent value="overview" className="space-y-6">
                    {/* Profile Completion Progress */}
                    <StandardCard variant="elevated" className="p-6" title="Profile Completion">
                        <div className="space-y-4">
                            <div className="flex items-center justify-between">
                                <span className="text-sm font-medium">Complete your profile</span>
                                <span className="text-sm text-muted-foreground">{calculateProfileCompletion()}%</span>
                            </div>
                            <Progress value={calculateProfileCompletion()} className="h-2" />
                            <p className="text-xs text-muted-foreground">
                                Complete your profile to increase visibility and trust
                            </p>
                        </div>
                    </StandardCard>

                    {/* Statistics Grid */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <Card className="p-6">
                            <div className="flex items-center space-x-4">
                                <div className="p-2 bg-blue-100 rounded-lg">
                                    <Eye className="h-6 w-6 text-blue-600" />
                                </div>
                                <div>
                                    <p className="text-2xl font-bold">{profile.stats?.profileViews || 0}</p>
                                    <p className="text-sm text-muted-foreground">Profile Views</p>
                                </div>
                            </div>
                        </Card>

                        <Card className="p-6">
                            <div className="flex items-center space-x-4">
                                <div className="p-2 bg-green-100 rounded-lg">
                                    <Calendar className="h-6 w-6 text-green-600" />
                                </div>
                                <div>
                                    <p className="text-2xl font-bold">{profile.stats?.totalBookings || 0}</p>
                                    <p className="text-sm text-muted-foreground">Total Bookings</p>
                                </div>
                            </div>
                        </Card>

                        <Card className="p-6">
                            <div className="flex items-center space-x-4">
                                <div className="p-2 bg-purple-100 rounded-lg">
                                    <Target className="h-6 w-6 text-purple-600" />
                                </div>
                                <div>
                                    <p className="text-2xl font-bold">{profile.stats?.completedJobs || 0}</p>
                                    <p className="text-sm text-muted-foreground">Completed Jobs</p>
                                </div>
                            </div>
                        </Card>

                        <Card className="p-6">
                            <div className="flex items-center space-x-4">
                                <div className="p-2 bg-yellow-100 rounded-lg">
                                    <Star className="h-6 w-6 text-yellow-600" />
                                </div>
                                <div>
                                    <p className="text-2xl font-bold">{profile.stats?.rating || 0}</p>
                                    <p className="text-sm text-muted-foreground">Average Rating</p>
                                </div>
                            </div>
                        </Card>
                    </div>

                    {/* Recent Activity */}
                    <StandardCard variant="elevated" className="p-6" title="Recent Activity">
                        <div className="space-y-4">
                            <div className="flex items-center space-x-4">
                                <div className="p-2 bg-blue-100 rounded-lg">
                                    <Clock className="h-5 w-5 text-blue-600" />
                                </div>
                                <div>
                                    <p className="font-medium">Last Active</p>
                                    <p className="text-sm text-muted-foreground">
                                        {profile.activity?.lastActive ? 
                                            new Date(profile.activity.lastActive).toLocaleDateString() : 
                                            'Just now'
                                        }
                                    </p>
                                </div>
                            </div>
                            
                            <div className="flex items-center space-x-4">
                                <div className="p-2 bg-green-100 rounded-lg">
                                    <TrendingUp className="h-5 w-5 text-green-600" />
                                </div>
                                <div>
                                    <p className="font-medium">Login Streak</p>
                                    <p className="text-sm text-muted-foreground">
                                        {profile.activity?.streak || 1} days
                                    </p>
                                </div>
                            </div>

                            <div className="flex items-center space-x-4">
                                <div className="p-2 bg-purple-100 rounded-lg">
                                    <Award className="h-5 w-5 text-purple-600" />
                                </div>
                                <div>
                                    <p className="font-medium">Member Since</p>
                                    <p className="text-sm text-muted-foreground">
                                        {profile.stats?.memberSince ? 
                                            new Date(profile.stats.memberSince).toLocaleDateString() : 
                                            'Recently'
                                        }
                                    </p>
                                </div>
                            </div>
                        </div>
                    </StandardCard>

                    {/* Achievements */}
                    {profile.achievements && profile.achievements.length > 0 && (
                        <StandardCard variant="elevated" className="p-6" title="Achievements">
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                {profile.achievements.map((achievement) => (
                                    <div key={achievement.id} className="flex items-center space-x-3 p-3 bg-muted rounded-lg">
                                        <div className="p-2 bg-yellow-100 rounded-lg">
                                            <Award className="h-5 w-5 text-yellow-600" />
                                        </div>
                                        <div>
                                            <p className="font-medium text-sm">{achievement.title}</p>
                                            <p className="text-xs text-muted-foreground">{achievement.description}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </StandardCard>
                    )}
                </TabsContent>
                    </>
                )}

                {profile.role !== 'provider' && (
                    <>
                        <TabsContent value="publicProfile" className="space-y-6">
                    <StandardCard variant="elevated" className="p-4 sm:p-6" title="Public Profile">
                        <div className="flex flex-col lg:flex-row gap-6">
                            {/* Profile Photo Section */}
                            <div className="flex flex-col items-center space-y-4">
                                <div className="relative">
                                    <div className="w-24 h-24 sm:w-32 sm:h-32 rounded-full overflow-hidden border-4 border-background shadow-lg">
                                        {profile.photoURL ? (
                                            <Image
                                                src={profile.photoURL}
                                                alt="Profile"
                                                width={128}
                                                height={128}
                                                className="w-full h-full object-cover"
                                            />
                                        ) : (
                                            <div className="w-full h-full bg-muted flex items-center justify-center">
                                                <User className="h-12 w-12 sm:h-16 sm:w-16 text-muted-foreground" />
                                            </div>
                                        )}
                                    </div>
                                    <Button
                                        size="sm"
                                        variant="outline"
                                        className="absolute -bottom-1 -right-1 sm:-bottom-2 sm:-right-2 rounded-full w-6 h-6 sm:w-8 sm:h-8 p-0"
                                        onClick={() => fileInputRef.current?.click()}
                                        disabled={isUploading}
                                    >
                                        <Camera className="h-3 w-3 sm:h-4 sm:w-4" />
                                    </Button>
                                </div>
                                
                                <div className="text-center space-y-2">
                                    <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => fileInputRef.current?.click()}
                                        disabled={isUploading}
                                    >
                                        {isUploading ? (
                                            <>
                                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                                {t('uploading')}
                                            </>
                                        ) : (
                                            <>
                                                <Upload className="mr-2 h-4 w-4" />
                                                {t('uploadPicture')}
                                            </>
                                        )}
                                    </Button>
                                    
                                    {uploadProgress !== null && (
                                        <div className="w-32">
                                            <Progress value={uploadProgress} className="h-2" />
                                        </div>
                                    )}
                                </div>
                                
                                <input
                                    ref={fileInputRef}
                                    type="file"
                                    accept="image/*"
                                    onChange={handlePhotoUpload}
                                    className="hidden"
                                />
                            </div>

                            {/* Profile Info */}
                            <div className="flex-1 space-y-6">
                                <div className="flex items-center gap-4">
                                    <h2 className="text-2xl font-bold">{profile.displayName}</h2>
                                    {verificationStatus === 'Verified' && (
                                        <Badge variant="default" className="bg-green-100 text-green-800 border-green-200">
                                            <CheckCircle className="h-3 w-3 mr-1" />
                                            {t('verified')}
                                        </Badge>
                                    )}
                                    {profile.subscription?.tier === 'pro' && (
                                        <Badge variant="default" className="bg-blue-100 text-blue-800 border-blue-200">
                                            <Crown className="h-3 w-3 mr-1" />
                                            {t('pro')}
                                        </Badge>
                                    )}
                                </div>

                                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <Label htmlFor="displayName">Display Name</Label>
                                        <Input
                                            id="displayName"
                                            value={profile.displayName}
                                            onChange={(e) => setProfile(prev => prev ? { ...prev, displayName: e.target.value } : null)}
                                            className="w-full"
                                        />
                                    </div>
                                    <div>
                                        <Label htmlFor="email">Email</Label>
                                        <Input
                                            id="email"
                                            type="email"
                                            value={profile.email}
                                            disabled
                                            className="bg-muted w-full"
                                        />
                                    </div>
                                    <div>
                                        <Label htmlFor="phoneNumber">Phone Number</Label>
                                        <Input
                                            id="phoneNumber"
                                            value={profile.phoneNumber || ''}
                                            onChange={(e) => setProfile(prev => prev ? { ...prev, phoneNumber: e.target.value } : null)}
                                            className="w-full"
                                        />
                                    </div>
                                    <div>
                                        <Label htmlFor="location">Location</Label>
                                        <Input
                                            id="location"
                                            value={profile.location || ''}
                                            onChange={(e) => setProfile(prev => prev ? { ...prev, location: e.target.value } : null)}
                                            className="w-full"
                                        />
                                    </div>
                                    <div>
                                        <Label htmlFor="website">Website</Label>
                                        <Input
                                            id="website"
                                            value={profile.website || ''}
                                            onChange={(e) => setProfile(prev => prev ? { ...prev, website: e.target.value } : null)}
                                            className="w-full"
                                        />
                                    </div>
                                    <div>
                                        <Label htmlFor="businessName">Business Name</Label>
                                        <Input
                                            id="businessName"
                                            value={profile.businessName || ''}
                                            onChange={(e) => setProfile(prev => prev ? { ...prev, businessName: e.target.value } : null)}
                                            className="w-full"
                                        />
                                    </div>
                                </div>

                                <div>
                                    <Label htmlFor="bio">Bio</Label>
                                    <Textarea
                                        id="bio"
                                        value={profile.bio || ''}
                                        onChange={(e) => setProfile(prev => prev ? { ...prev, bio: e.target.value } : null)}
                                        rows={4}
                                        placeholder="Tell us about yourself..."
                                    />
                                </div>

                                {/* Social Media Links */}
                                <div className="space-y-4">
                                    <Label>Social Media & Portfolio</Label>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                        <div className="flex items-center space-x-2">
                                            <Linkedin className="h-4 w-4 text-blue-600" />
                                            <Input
                                                placeholder="LinkedIn profile URL"
                                                value={profile.socialMedia?.linkedin || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    socialMedia: { 
                                                        ...prev.socialMedia, 
                                                        linkedin: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <Github className="h-4 w-4 text-gray-600" />
                                            <Input
                                                placeholder="GitHub profile URL"
                                                value={profile.socialMedia?.github || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    socialMedia: { 
                                                        ...prev.socialMedia, 
                                                        github: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <Twitter className="h-4 w-4 text-blue-400" />
                                            <Input
                                                placeholder="Twitter profile URL"
                                                value={profile.socialMedia?.twitter || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    socialMedia: { 
                                                        ...prev.socialMedia, 
                                                        twitter: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <Instagram className="h-4 w-4 text-pink-600" />
                                            <Input
                                                placeholder="Instagram profile URL"
                                                value={profile.socialMedia?.instagram || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    socialMedia: { 
                                                        ...prev.socialMedia, 
                                                        instagram: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <Facebook className="h-4 w-4 text-blue-600" />
                                            <Input
                                                placeholder="Facebook profile URL"
                                                value={profile.socialMedia?.facebook || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    socialMedia: { 
                                                        ...prev.socialMedia, 
                                                        facebook: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                        <div className="flex items-center space-x-2">
                                            <LinkIcon className="h-4 w-4 text-gray-600" />
                                            <Input
                                                placeholder="Portfolio website URL"
                                                value={profile.socialMedia?.portfolio || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    socialMedia: { 
                                                        ...prev.socialMedia, 
                                                        portfolio: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                    </div>
                                </div>

                                <Button 
                                    onClick={() => handleSaveProfile('publicProfile', profile)}
                                    disabled={isSaving}
                                >
                                    {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                    Save Changes
                                </Button>
                            </div>
                        </div>
                    </StandardCard>
                </TabsContent>

                <TabsContent value="skills" className="space-y-6">
                    <ProviderOnly fallback={
                        <StandardCard variant="elevated" className="p-6" title="Access Restricted">
                            <div className="text-center py-8">
                                <ShieldCheck className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                                <h3 className="text-lg font-semibold mb-2">Provider Access Required</h3>
                                <p className="text-muted-foreground">
                                    This section is only available to service providers. 
                                    Contact support if you believe this is an error.
                                </p>
                            </div>
                        </StandardCard>
                    }>
                        <StandardCard variant="elevated" className="p-6" title="Skills & Expertise">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <Zap className="h-5 w-5" />
                                Skills & Expertise
                            </CardTitle>
                            <CardDescription>
                                Showcase your skills and areas of expertise
                            </CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            {/* Add New Skill */}
                            <div className="space-y-4">
                                <Label>Add New Skill</Label>
                                <div className="flex gap-2">
                                    <Input
                                        placeholder="Enter a skill (e.g., Web Development, Photography, etc.)"
                                        value={newSkill}
                                        onChange={(e) => setNewSkill(e.target.value)}
                                        onKeyPress={(e) => e.key === 'Enter' && addSkill()}
                                    />
                                    <Button onClick={addSkill} disabled={!newSkill.trim()}>
                                        <Plus className="h-4 w-4" />
                                    </Button>
                                </div>
                            </div>

                            {/* Skills List */}
                            <div className="space-y-4">
                                <Label>Your Skills</Label>
                                {profile.skills && profile.skills.length > 0 ? (
                                    <div className="flex flex-wrap gap-2">
                                        {profile.skills.map((skill, index) => (
                                            <div key={index} className="flex items-center gap-2">
                                                {editingSkill === skill ? (
                                                    <div className="flex items-center gap-2">
                                                        <Input
                                                            value={editingSkillValue}
                                                            onChange={(e) => setEditingSkillValue(e.target.value)}
                                                            className="h-8"
                                                            onKeyPress={(e) => e.key === 'Enter' && saveSkillEdit()}
                                                        />
                                                        <Button size="sm" onClick={saveSkillEdit}>
                                                            <CheckCircle className="h-3 w-3" />
                                                        </Button>
                                                        <Button size="sm" variant="outline" onClick={cancelSkillEdit}>
                                                            <X className="h-3 w-3" />
                                                        </Button>
                                                    </div>
                                                ) : (
                                                    <Badge variant="secondary" className="flex items-center gap-2 px-3 py-1">
                                                        <span>{skill}</span>
                                                        <Button
                                                            size="sm"
                                                            variant="ghost"
                                                            className="h-4 w-4 p-0"
                                                            onClick={() => editSkill(skill)}
                                                        >
                                                            <Edit3 className="h-3 w-3" />
                                                        </Button>
                                                        <Button
                                                            size="sm"
                                                            variant="ghost"
                                                            className="h-4 w-4 p-0 text-red-500 hover:text-red-700"
                                                            onClick={() => removeSkill(skill)}
                                                        >
                                                            <X className="h-3 w-3" />
                                                        </Button>
                                                    </Badge>
                                                )}
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <div className="text-center py-8 text-muted-foreground">
                                        <Zap className="h-12 w-12 mx-auto mb-4 opacity-50" />
                                        <p>No skills added yet</p>
                                        <p className="text-sm">Add your first skill to get started</p>
                                    </div>
                                )}
                            </div>

                            <Button 
                                onClick={() => handleSaveProfile('skills', { skills: profile.skills })}
                                disabled={isSaving}
                            >
                                {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                Save Skills
                            </Button>
                        </CardContent>
                    </StandardCard>
                    </ProviderOnly>
                </TabsContent>

                {profile.role !== 'provider' && (
                    <>
                        <TabsContent value="account" className="space-y-6">
                            <StandardCard variant="elevated" className="p-6" title="Account Settings">
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <ShieldCheck className="h-5 w-5" />
                                        Account Settings
                                    </CardTitle>
                                    <CardDescription>
                                        Manage your account security and verification
                                    </CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-6">
                                    <IdentityVerification />
                                    
                                    {/* Privacy Settings */}
                                    <div className="space-y-6">
                                        <div>
                                            <h3 className="text-lg font-semibold mb-4">Privacy Settings</h3>
                                            <div className="space-y-4">
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Profile Visibility</Label>
                                                <p className="text-sm text-muted-foreground">Control who can see your profile</p>
                                            </div>
                                            <select
                                                value={profile.preferences?.profileVisibility || 'public'}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    preferences: { 
                                                        ...prev.preferences, 
                                                        profileVisibility: e.target.value as 'public' | 'private' | 'connections'
                                                    } 
                                                } : null)}
                                                className="p-2 border rounded-md"
                                            >
                                                <option value="public">Public</option>
                                                <option value="connections">Connections Only</option>
                                                <option value="private">Private</option>
                                            </select>
                                        </div>
                                        
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Show Email Address</Label>
                                                <p className="text-sm text-muted-foreground">Display your email on your profile</p>
                                            </div>
                                            <input
                                                type="checkbox"
                                                checked={profile.preferences?.showEmail || false}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    preferences: { 
                                                        ...prev.preferences, 
                                                        showEmail: e.target.checked
                                                    } 
                                                } : null)}
                                                className="h-4 w-4"
                                            />
                                        </div>
                                        
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Show Phone Number</Label>
                                                <p className="text-sm text-muted-foreground">Display your phone number on your profile</p>
                                            </div>
                                            <input
                                                type="checkbox"
                                                checked={profile.preferences?.showPhone || false}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    preferences: { 
                                                        ...prev.preferences, 
                                                        showPhone: e.target.checked
                                                    } 
                                                } : null)}
                                                className="h-4 w-4"
                                            />
                                        </div>
                                        
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Show Location</Label>
                                                <p className="text-sm text-muted-foreground">Display your location on your profile</p>
                                            </div>
                                            <input
                                                type="checkbox"
                                                checked={profile.preferences?.showLocation || false}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    preferences: { 
                                                        ...prev.preferences, 
                                                        showLocation: e.target.checked
                                                    } 
                                                } : null)}
                                                className="h-4 w-4"
                                            />
                                        </div>
                                        
                                        <div className="flex items-center justify-between">
                                            <div>
                                                <Label>Allow Direct Messages</Label>
                                                <p className="text-sm text-muted-foreground">Let other users send you messages</p>
                                            </div>
                                            <input
                                                type="checkbox"
                                                checked={profile.preferences?.allowMessages || false}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    preferences: { 
                                                        ...prev.preferences, 
                                                        allowMessages: e.target.checked
                                                    } 
                                                } : null)}
                                                className="h-4 w-4"
                                            />
                                        </div>
                                    </div>
                                </div>
                                
                                <Button 
                                    onClick={() => handleSaveProfile('preferences', { preferences: profile.preferences })}
                                    disabled={isSaving}
                                >
                                    {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                    Save Privacy Settings
                                </Button>
                            </div>
                        </CardContent>
                    </StandardCard>
                </TabsContent>
                    </>
                )}

                <TabsContent value="payout" className="space-y-6">
                    <ProviderOnly fallback={
                        <StandardCard variant="elevated" className="p-6" title="Access Restricted">
                            <div className="text-center py-8">
                                <ShieldCheck className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                                <h3 className="text-lg font-semibold mb-2">Provider Access Required</h3>
                                <p className="text-muted-foreground">
                                    This section is only available to service providers. 
                                    Contact support if you believe this is an error.
                                </p>
                            </div>
                        </StandardCard>
                    }>
                        <StandardCard variant="elevated" className="p-6" title="Payout Details">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <CreditCard className="h-5 w-5" />
                                Payout Details
                            </CardTitle>
                            <CardDescription>
                                Configure how you receive payments
                            </CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <Label htmlFor="payoutMethod">Payout Method</Label>
                                    <select
                                        id="payoutMethod"
                                        value={profile.payoutDetails?.method || ''}
                                        onChange={(e) => setProfile(prev => prev ? { 
                                            ...prev, 
                                            payoutDetails: { 
                                                ...prev.payoutDetails, 
                                                method: e.target.value as 'gcash' | 'bank' 
                                            } 
                                        } : null)}
                                        className="w-full p-2 border rounded-md"
                                    >
                                        <option value="">Select method</option>
                                        <option value="gcash">GCash</option>
                                        <option value="bank">Bank Transfer</option>
                                    </select>
                                </div>
                                
                                {profile.payoutDetails?.method === 'gcash' && (
                                    <div>
                                        <Label htmlFor="gCashNumber">GCash Number</Label>
                                        <Input
                                            id="gCashNumber"
                                            value={profile.payoutDetails?.gCashNumber || ''}
                                            onChange={(e) => setProfile(prev => prev ? { 
                                                ...prev, 
                                                payoutDetails: { 
                                                    ...prev.payoutDetails, 
                                                    gCashNumber: e.target.value 
                                                } 
                                            } : null)}
                                            placeholder="09XXXXXXXXX"
                                        />
                                    </div>
                                )}
                                
                                {profile.payoutDetails?.method === 'bank' && (
                                    <>
                                        <div>
                                            <Label htmlFor="bankName">Bank Name</Label>
                                            <Input
                                                id="bankName"
                                                value={profile.payoutDetails?.bankName || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    payoutDetails: { 
                                                        ...prev.payoutDetails, 
                                                        bankName: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                        <div>
                                            <Label htmlFor="bankAccountNumber">Account Number</Label>
                                            <Input
                                                id="bankAccountNumber"
                                                value={profile.payoutDetails?.bankAccountNumber || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    payoutDetails: { 
                                                        ...prev.payoutDetails, 
                                                        bankAccountNumber: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                        <div>
                                            <Label htmlFor="bankAccountName">Account Name</Label>
                                            <Input
                                                id="bankAccountName"
                                                value={profile.payoutDetails?.bankAccountName || ''}
                                                onChange={(e) => setProfile(prev => prev ? { 
                                                    ...prev, 
                                                    payoutDetails: { 
                                                        ...prev.payoutDetails, 
                                                        bankAccountName: e.target.value 
                                                    } 
                                                } : null)}
                                            />
                                        </div>
                                    </>
                                )}
                            </div>
                            
                            <Button 
                                onClick={() => handleSaveProfile('payout', { payoutDetails: profile.payoutDetails })}
                                disabled={isSaving}
                            >
                                {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                Save Payout Details
                            </Button>
                        </CardContent>
                    </StandardCard>
                    </ProviderOnly>
                </TabsContent>

                {profile.role !== 'provider' && (
                    <>
                        <TabsContent value="loyalty" className="space-y-6">
                            <StandardCard variant="elevated" className="p-6" title="Loyalty Points">
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <Gift className="h-5 w-5" />
                                        Loyalty Points
                                    </CardTitle>
                                    <CardDescription>
                                        Earn and redeem loyalty points
                                    </CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <div className="text-center space-y-4">
                                        <div className="text-4xl font-bold text-primary">
                                            {profile.loyaltyPoints || 0}
                                        </div>
                                        <p className="text-muted-foreground">Loyalty Points</p>
                                        <Button variant="outline">
                                            <Star className="mr-2 h-4 w-4" />
                                            View Rewards
                                        </Button>
                                    </div>
                                </CardContent>
                            </StandardCard>

                            {/* Achievements Section */}
                            <StandardCard variant="elevated" className="p-6" title="Achievements & Badges">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <Award className="h-5 w-5" />
                                Achievements & Badges
                            </CardTitle>
                            <CardDescription>
                                Unlock achievements and earn badges for your activity
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {profile.achievements && profile.achievements.length > 0 ? (
                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                    {profile.achievements.map((achievement) => (
                                        <div key={achievement.id} className="flex items-center space-x-3 p-4 bg-muted rounded-lg border">
                                            <div className="p-2 bg-yellow-100 rounded-lg">
                                                <Award className="h-6 w-6 text-yellow-600" />
                                            </div>
                                            <div className="flex-1">
                                                <p className="font-medium text-sm">{achievement.title}</p>
                                                <p className="text-xs text-muted-foreground">{achievement.description}</p>
                                                <p className="text-xs text-muted-foreground mt-1">
                                                    Earned {achievement.earnedAt ? new Date(achievement.earnedAt).toLocaleDateString() : 'Recently'}
                                                </p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <div className="text-center py-8 text-muted-foreground">
                                    <Award className="h-12 w-12 mx-auto mb-4 opacity-50" />
                                    <p>No achievements yet</p>
                                    <p className="text-sm">Complete actions to unlock achievements</p>
                                </div>
                            )}
                        </CardContent>
                    </StandardCard>

                    {/* Sample Achievements for Demo */}
                    <StandardCard variant="elevated" className="p-6" title="Available Achievements">
                        <CardContent>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg border border-dashed">
                                    <div className="p-2 bg-gray-100 rounded-lg">
                                        <User className="h-5 w-5 text-gray-600" />
                                    </div>
                                    <div className="flex-1">
                                        <p className="font-medium text-sm">Profile Completer</p>
                                        <p className="text-xs text-muted-foreground">Complete 100% of your profile</p>
                                        <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                                            <div 
                                                className="bg-blue-600 h-2 rounded-full" 
                                                style={{ width: `${calculateProfileCompletion()}%` }}
                                            ></div>
                                        </div>
                                    </div>
                                </div>

                                <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg border border-dashed">
                                    <div className="p-2 bg-gray-100 rounded-lg">
                                        <Star className="h-5 w-5 text-gray-600" />
                                    </div>
                                    <div className="flex-1">
                                        <p className="font-medium text-sm">First Booking</p>
                                        <p className="text-xs text-muted-foreground">Complete your first booking</p>
                                        <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                                            <div 
                                                className="bg-green-600 h-2 rounded-full" 
                                                style={{ width: `${(profile.stats?.totalBookings || 0) > 0 ? 100 : 0}%` }}
                                            ></div>
                                        </div>
                                    </div>
                                </div>

                                <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg border border-dashed">
                                    <div className="p-2 bg-gray-100 rounded-lg">
                                        <Zap className="h-5 w-5 text-gray-600" />
                                    </div>
                                    <div className="flex-1">
                                        <p className="font-medium text-sm">Skill Master</p>
                                        <p className="text-xs text-muted-foreground">Add 5 or more skills</p>
                                        <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                                            <div 
                                                className="bg-purple-600 h-2 rounded-full" 
                                                style={{ width: `${Math.min(((profile.skills?.length || 0) / 5) * 100, 100)}%` }}
                                            ></div>
                                        </div>
                                    </div>
                                </div>

                                <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg border border-dashed">
                                    <div className="p-2 bg-gray-100 rounded-lg">
                                        <CheckCircle className="h-5 w-5 text-gray-600" />
                                    </div>
                                    <div className="flex-1">
                                        <p className="font-medium text-sm">Verified User</p>
                                        <p className="text-xs text-muted-foreground">Complete identity verification</p>
                                        <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                                            <div 
                                                className="bg-green-600 h-2 rounded-full" 
                                                style={{ width: `${verificationStatus === 'Verified' ? 100 : 0}%` }}
                                            ></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                    </StandardCard>
                </TabsContent>
                    </>
                )}

                {profile.role !== 'provider' && (
                    <>
                        <TabsContent value="referrals" className="space-y-6">
                            <StandardCard variant="elevated" className="p-6" title="Referrals">
                                <CardHeader>
                                    <CardTitle className="flex items-center gap-2">
                                        <Users className="h-5 w-5" />
                                        Referrals
                                    </CardTitle>
                                    <CardDescription>
                                        Invite friends and earn rewards
                                    </CardDescription>
                                </CardHeader>
                                <CardContent className="space-y-6">
                                    <div>
                                        <Label>Your Referral Code</Label>
                                        <div className="flex gap-2">
                                            <Input
                                                value={profile.referralCode || ''}
                                                readOnly
                                                className="bg-muted"
                                            />
                                            <Button variant="outline" onClick={copyReferralCode}>
                                                <Copy className="h-4 w-4" />
                                            </Button>
                                        </div>
                                    </div>
                                    
                                    <div className="text-center space-y-4">
                                        <p className="text-muted-foreground">
                                            Share your referral code with friends and earn rewards when they join!
                                        </p>
                                        <Button>
                                            <Users className="mr-2 h-4 w-4" />
                                            Share Referral Link
                                        </Button>
                                    </div>
                                </CardContent>
                            </StandardCard>
                        </TabsContent>
                    </>
                )}
            </Tabs>
        </div>
    );
}
