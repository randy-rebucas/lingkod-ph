
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow public read access to all files for viewing images, etc.
    match /{allPaths=**} {
      allow read;
    }

    // Allow any authenticated user to write to these specific public-upload folders.
    // Frontend logic restricts who can actually trigger these uploads.
    match /platform/logo/{allPaths=**} {
      allow write: if request.auth != null;
    }
    match /ad-campaign-images/{allPaths=**} {
      allow write: if request.auth != null;
    }
    match /backups/{allPaths=**} {
      allow write: if request.auth != null;
    }
    
    // Allow users to write to their own folders for profile pictures, etc.
    match /users/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow providers to upload documents to their own folder.
    match /provider-documents/{userId}/{allPaths=**} {
        allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to upload completion and work-log photos for specific bookings.
    // This is less secure as any auth'd user could write if they guess a bookingId,
    // but relies on frontend controls. For higher security, Cloud Functions would be needed.
    match /completion-photos/{bookingId}/{allPaths=**} {
      allow write: if request.auth != null;
    }
    match /work-log-photos/{bookingId}/{allPaths=**} {
      allow write: if request.auth != null;
    }
     match /chat-images/{conversationId}/{allPaths=**} {
      allow write: if request.auth != null;
    }
  }
}
