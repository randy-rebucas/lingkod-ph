
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Allow users to read/write their own user document
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isUserAuthenticated();
    }
    
    // Allow anyone to read provider profiles
    match /users/{providerId} {
      allow get: if resource.data.role == 'provider' || resource.data.role == 'agency';
    }

    // Allow providers to manage their own services
    match /services/{serviceId} {
      allow read; // Anyone can read services
      allow create, update, delete: if isOwner(resource.data.userId);
    }
    
    // Categories can be read by anyone, but only managed internally (e.g. via scripts)
    match /categories/{categoryId} {
        allow read;
        allow write: if false; // Protect from client-side writes
    }
    
    // Allow users to manage their own bookings
    // A provider can also update a booking they are part of
    match /bookings/{bookingId} {
      allow read, update: if isUserAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
      allow create: if isUserAuthenticated();
      allow delete: if isUserAuthenticated() && isOwner(resource.data.clientId); // Only client can delete (cancel)
    }

    // Chat conversations and messages
    match /conversations/{conversationId} {
      allow read, update: if isUserAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isUserAuthenticated();
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Quotes management
    match /quotes/{quoteId} {
       allow read, create, update, delete: if isUserAuthenticated() && isOwner(resource.data.providerId);
    }
    
    // Invoices management
    match /invoices/{invoiceId} {
       allow read, create, update, delete: if isUserAuthenticated() && isOwner(resource.data.providerId);
    }

    // Verification data subcollection on user
    match /users/{userId}/verification/{docId} {
        allow read, write: if isOwner(userId);
    }
    
    // Loyalty Program
    match /loyaltyRewards/{rewardId} {
        allow read;
        allow write: if false; // Only manageable from backend/scripts
    }
    
    match /users/{userId}/loyaltyTransactions/{transactionId} {
      allow read: if isOwner(userId);
      // Transactions should only be created via server-side logic (e.g. transaction in booking update)
      // or redeeming a reward, which is also a transaction.
      // We allow write here but the logic is controlled to prevent abuse.
      allow write: if isOwner(userId);
    }

  }
}
