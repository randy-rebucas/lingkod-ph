
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is trying to access their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users Collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if isAuthenticated();
      // Only the owner can read or update their own document, or admins can read all
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow update: if isAuthenticated() && isOwner(userId);
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Services Collection
    match /services/{serviceId} {
        // Anyone can read services (for browsing)
        allow read: if true;
        // Only authenticated users can create services
        allow create: if isAuthenticated();
        // Only the user who created the service can update or delete it
        allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Bookings Collection
    match /bookings/{bookingId} {
        // A user can create a booking if they are authenticated
        allow create: if isAuthenticated();
        // A user can read, update, or delete a booking if they are either the client or the provider
        allow read, update, delete: if isAuthenticated() && (isOwner(resource.data.clientId) || isOwner(resource.data.providerId));
    }

    // Categories Collection
    match /categories/{categoryId} {
        // Allow public read for all users to populate dropdowns etc.
        allow read: if true;
        // Restrict write access (typically done via a trusted server or admin SDK)
        allow write: if false; 
    }
    
    // Conversations and Messages
    match /conversations/{conversationId} {
        // Allow read/write if user is a participant
        allow read, create, update: if isAuthenticated() && request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            // Allow read if user is a participant of the parent conversation
            allow read: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
            // Allow create if user is a participant and the sender
            allow create: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]) && isOwner(request.resource.data.senderId);
        }
    }
    
    // Reviews Collection
    match /reviews/{reviewId} {
        // Allow public read
        allow read: if true;
        // Authenticated users can create reviews
        allow create: if isAuthenticated();
        // Only the review author can update/delete
        allow update, delete: if isAuthenticated() && isOwner(resource.data.clientId);
    }

    // Invoices Collection
    match /invoices/{invoiceId} {
        // Only the provider who created the invoice can access it
        allow read, create, update, delete: if isAuthenticated() && isOwner(resource.data.providerId);
    }
    
    // Quotes Collection
     match /quotes/{quoteId} {
        // Only the provider who created the quote can access it
        allow read, create, update, delete: if isAuthenticated() && isOwner(resource.data.providerId);
    }
    
    // Loyalty Rewards Collection
    match /loyaltyRewards/{rewardId} {
      // Publicly readable by all authenticated users
      allow read: if isAuthenticated();
      // Should only be written by an admin/backend process
      allow write: if false;
    }
    
    // Loyalty Transactions Subcollection
    match /users/{userId}/loyaltyTransactions/{transactionId} {
      // Only the owner of the user document can read or create transactions for themselves
      allow read, create: if isAuthenticated() && isOwner(userId);
      // Transactions should be immutable
      allow update, delete: if false;
    }
    
    // Referrals Collection
    match /referrals/{referralId} {
      // Only the referrer or the referred user can read the record
      allow read: if isAuthenticated() && (isOwner(resource.data.referrerId) || isOwner(resource.data.referredId));
      // Creating referrals is handled by a backend process or transaction, so no direct client creation
      allow create, update, delete: if false;
    }
    
    // Admin-only collections
    match /auditLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /broadcasts/{broadcastId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /platformSettings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Platform Collection (for global settings)
    match /platform/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Marketplace Collections
    
    // Products Collection
    match /products/{productId} {
      // Anyone can read products (for browsing)
      allow read: if true;
      // Only admins can create, update, or delete products
      allow create, update, delete: if isAdmin();
    }
    
    // Product Categories Collection
    match /productCategories/{categoryId} {
      // Anyone can read categories
      allow read: if true;
      // Only admins can manage categories
      allow create, update, delete: if isAdmin();
    }
    
    // Suppliers Collection
    match /suppliers/{supplierId} {
      // Authenticated users can read suppliers
      allow read: if isAuthenticated();
      // Only admins can manage suppliers
      allow create, update, delete: if isAdmin();
    }
    
    // Subscription Kits Collection
    match /subscriptionKits/{kitId} {
      // Anyone can read subscription kits
      allow read: if true;
      // Only admins can manage subscription kits
      allow create, update, delete: if isAdmin();
    }
    
    // Orders Collection
    match /orders/{orderId} {
      // Users can read, create, and update their own orders
      allow read, create, update: if isAuthenticated() && isOwner(resource.data.userId);
      // Admins can read all orders
      allow read: if isAdmin();
      // Only admins can delete orders
      allow delete: if isAdmin();
    }
    
    // Order Tracking Collection
    match /orderTracking/{trackingId} {
      // Users can read tracking for their own orders
      allow read: if isAuthenticated() && 
        get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.userId == request.auth.uid;
      // Only admins can create and update tracking
      allow create, update: if isAdmin();
    }
    
    // User Wallets Collection
    match /userWallets/{userId} {
      // Users can read and update their own wallet
      allow read, update: if isAuthenticated() && isOwner(userId);
      // Users can create their own wallet
      allow create: if isAuthenticated();
    }
    
    // Shopping Cart Collection (user-specific)
    match /users/{userId}/cart/{cartItemId} {
      // Users can manage their own cart
      allow read, create, update, delete: if isAuthenticated() && isOwner(userId);
    }
  }
}
